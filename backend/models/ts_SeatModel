/* import clientPromise from "../db/mongoDB";
import { MongoClient, ObjectId, Collection, WithId } from "mongodb";
import { IEvents, IPatrons, ISeats } from "../utils/interfaces";
 */


/* COLLECTION NAME */
//const collectionName = 'seats';

/* 
class SeatModel {
    private collection: Collection<ISeats>;

    constructor(client: MongoClient) {
        const db = client.db();
        this.collection = db.collection<ISeats>(collectionName);
    }

    async updateSeat(seatId: ObjectId, updates: any): Promise<boolean> {
        try {
            const result = await this.collection.updateOne(
                { _id: seatId },
                { $set: updates }
            )

            // check if update was successful
            if (result.modifiedCount === 1) {
                return true;
            } else {
                return false;
            }
        } catch (error) {
            console.error("Error updating seat: ", error);
            throw error;
        }
    }

    async getAvailableSeatsForEvent(): Promise<ISeats[]> {
        const query: { available: boolean } = { available: true };
        const availableSeats = await this.collection.find(query).toArray();

        return availableSeats;
    }

    async resetSeats() {

    }

    async setAvailableSeatsForEvent(eventId: ObjectId, section: string, row: number) {
        try {
            const result = await this.collection.updateMany(
                { section: section, row: row },
                { $set: { available: true, inPlay: true } }
            );

            console.log("Seats successfully updated: ", result);
        } catch (err) {
            console.log("Database error: ", err)
        }
    }

    async assignPatrons(section: string, seatNumber: number, row: number, patron: IPatrons, callAhead: boolean) {
        const { fullName: name, _id: patronID } = patron;
        try {
            const result = await this.collection.updateOne(
                {
                    section: section,
                    seatNumber: seatNumber,
                    row: row
                },
                {
                    $set: {
                        available: false,
                        patron: {
                            patronId: patronID,
                            name: name,
                            callAhead: callAhead
                        }
                    }
                }
            )

            if (result) {
                console.log(`Patron ${patronID} added successfully.`)
            } else {
                console.log("Patron unable to be added.")
            }
        } catch (err) {

        }

    }

    async getAvailableSeatCount() {

    }

    async addSeat(eventId: ObjectId, floor: number, section: string, seatNumber: number, available: boolean, inPlay: boolean, row: number) {
        try {
            const result = await this.collection.insertOne(
                {
                    eventId: eventId,
                    floor: floor,
                    section: section,
                    row: row,
                    seatNumber: seatNumber,
                    available: available,
                    inPlay: inPlay,
                }
            )

        } catch (err) {
            console.log(err)
        }
    }
}

export default SeatModel; */